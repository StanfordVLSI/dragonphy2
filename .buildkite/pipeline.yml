steps:
  - command: |
      # set up environment
      source /cad/modules/tcl/init/bash
      module load base xcelium

      # create virtual environment
      /usr/local/miniconda/bin/python3.7 -m venv venv
      source venv/bin/activate

      # upgrade pip
      pip install -U pip

      # install dragonphy
      pip install -e .

      # build models (TODO: cleanup)
      python src/rx_adc/fpga/gen.py -o src/rx_adc/fpga
      sed -i '1 s/^/`include "msdsl.sv"\n/' src/rx_adc/fpga/rx_adc_core.sv

      # run tests
      pip install pytest
      pytest tests -s -v -r s

      # simulate FPGA design
      pytest emu/test_emu_build.py -s -v -r s
      anasymod -i emu --sim --simulator_name xrun

      # deactivate virtual environment
      deactivate
    label: "test"
    timeout_in_minutes: 60
    agents:
      fault2: "true"
  - command: |
      # set up environment
      source /etc/environment
      echo $$PATH

      # create virtual environment
      python3.7 -m venv venv
      source venv/bin/activate

      # upgrade pip
      pip install -U pip

      # install dragonphy
      pip install -e .

      # build models (TODO: cleanup)
      python src/rx_adc/fpga/gen.py -o src/rx_adc/fpga
      sed -i '1 s/^/`include "msdsl.sv"\n/' src/rx_adc/fpga/rx_adc_core.sv

      # install pytest to allow tests to run
      pip install pytest

      # build file structure
      pytest emu/test_emu_build.py -s -v -r s

      # simulate FPGA design
      anasymod -i emu --sim --simulator_name vivado

      # build bitstream
      anasymod -i emu --build

      # show results of bitstream build
      tree emu
      cat emu/build/project/project.runs/synth_1/runme.log
      cat emu/build/project/project.runs/impl_1/runme.log

      # program FPGA and run test
      pytest emu/test_emu_prog.py -s -v -r s

      # deactivate virtual env
      deactivate
    label: "test_emu"
    timeout_in_minutes: 60
    agents:
        fpga_verif: "true"
