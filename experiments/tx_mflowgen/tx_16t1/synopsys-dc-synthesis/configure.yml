#=========================================================================
# Synopsys DC Synthesis
#=========================================================================
# Author : Christopher Torng, Yanghui Ou
# Date   : June 7, 2019
#

name: synopsys-dc-synthesis

#-------------------------------------------------------------------------
# Inputs and Outputs
#-------------------------------------------------------------------------

inputs:
  - adk
  - read_design.tcl
  - constraints.tcl
  - run.saif

outputs:
  - design.v
  - design.sdc
  - design.namemap

#-------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------

commands:
  - bash run.sh

#-------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------

parameters:
  clock_period: 0.7
  design_name: undefined
  # Path to the design instance in run.saif (e.g., tb/dut)
  saif_instance: undefined
  flatten_effort: 2
  retime: 1
  retime_registers: 0
  topographical: True
  nthreads: 16  # multithreading available to the tool

#-------------------------------------------------------------------------
# Debug
#-------------------------------------------------------------------------

debug:
  - export DC_EXIT_AFTER_SETUP=1
  - ln -sf results/*.mapped.ddc debug.ddc
  - design_vision-xg -topographical -x "source dc.tcl; read_ddc debug.ddc"

#-------------------------------------------------------------------------
# Assertions
#-------------------------------------------------------------------------

preconditions:

  - assert Tool( 'dc_shell-xg-t' )           # tool check
  - assert File( 'inputs/adk' )              # must exist
  - assert File( 'inputs/read_design.tcl' )  # must exist
  - assert File( 'inputs/constraints.tcl' )  # must exist

postconditions:

  - assert File( 'outputs/design.v' )        # must exist
  - assert File( 'outputs/design.sdc' )      # must exist

  # Basic error checking

  - assert 'Error:' not in File( 'logs/dc.log' )
  - assert 'Unresolved references' not in File( 'logs/dc.log' )
  - assert 'Unable to resolve' not in File( 'logs/dc.log' )

  # If GTECH is found, that means this design was not mapped to a
  # technology library and is still in DC's generic representation

  - assert 'GTECH' not in File( 'outputs/design.v' )

  # Sanity check that there is a clock in the constraints

  - assert 'create_clock' in File( 'outputs/design.sdc' )

  # Check that at least N% of registers were clock-gated
  # TODO add this check back

#  - |
#    from assertion_helpers import percent_clock_gated, n_regs
#    if n_regs() > 10:
#      assert percent_clock_gated() > 0.50


