//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /home/sherbst/Code/JusTAG/verif/JTAGDriver.svp
//  Source template: JTAGDriver
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/* *****************************************************************************
 * File: jtag_driver.v
 * Author: Ofer Shacham
 * 
 * Description:
 * driver for the jtag interface
 * We assume a ratio of 1:4 for tck:Clk
 *
 * Change bar:
 * -----------
 * Date          Author   Description
 * Apr 3, 2010  shacham  initial version
 * Apr 18, 2012  shacham  clean up of names and genesis syntactic sugar
 * May 19, 2014  jingpu   added function for dumping SVF file
 *  
 * 
 * ****************************************************************************/

////////////////////////////// IMPORTANT MESSAGE: //////////////////////////////
// Note that programs are written using object oriented programming. They
// are closer to software than to hardware. There is therefore no real need
// in a genesis type parameterization.
////////////////////////////////////////////////////////////////////////////////


// To make life just a bit cleaner, we can define types for our transactions
// These types could have been generated according to the RTL but I got lazy
// and just copied them from cfg_and_dbg.vp and from tap.vp

package jtag_drv_pack;

parameter jtag_inst_width = 5;
parameter sc_bus_width = 32;
parameter sc_addr_width = 14;

parameter tc_bus_width = 32;
parameter tc_addr_width = 14;


parameter sc_op_width = 2;
parameter tc_op_width = 2;

typedef enum {sc_domain, tc_domain} regfile_t;
typedef enum logic [sc_op_width-1:0] {nop=0, read=1, write=2, ack=3} regfile_op_t;

typedef struct {
   logic [127:0] data_in;
   logic [127:0] data_out;
   logic [127:0] addr;
   regfile_t		domain;
   regfile_op_t	op;
   bit 		 done;
} jtag_regfile_trans_t;

typedef enum logic [jtag_inst_width-1:0]
	     {extest = 0, idcode = 1, sample = 2,
	      sc_cfg_data = 8,
	      sc_cfg_inst = 9,
	      sc_cfg_addr = 10,
	      tc_cfg_data = 12,
	      tc_cfg_inst = 13,
	      tc_cfg_addr = 14,
	      bypass = '1
	      } jtag_op_t;





/*************************** CLASS JTAGDRIVER ********************************/
class JTAGDriver;
   virtual raw_jtag_ifc_unq1.test ifc; // interface for the jtag signals

   int reset_done;	// is jtag reset procedure done?
   bit tck_edge;	// Is the next jtag clock edge a 1 or a 0
   int svf_file;        // file handler for SVF file

   // current transaction 
   jtag_regfile_trans_t cur_trans;



   function new(virtual raw_jtag_ifc_unq1.test ifc, int svf_file = 0);
      reset_done = 0;
      tck_edge = 1;
      this.ifc = ifc;
      this.svf_file = svf_file;
   endfunction // new

   /****************************************************************************
    *************************** Top level  tasks 
    ***************************************************************************/
   // task Send sends a single jtag to regfile transaction
   extern task Send(jtag_regfile_trans_t new_trans);

   /****************************/
   // get the results of the latest transaction sent
   /****************************/
   extern function jtag_regfile_trans_t GetResult();

   /****************************/
   // initialization of the jtag signals
   /****************************/
   extern task Zero();     

   /****************************/
   // task Reset, resets the jtag state machine and registers
   /****************************/
   task Reset();
      repeat (2) @(posedge this.ifc.Clk);
      this.ifc.tck = 1'b0;
      this.ifc.trst_n = 1'b0;
      this.ifc.tms = 1'b1;

      // wait a couple of jtag clocks
      repeat (2) Next_tck();

      // now un-reset
      this.ifc.trst_n = 1'b1;
      repeat (2) Next_tck();

      // move to Run Test Idle
      this.ifc.tms = 1'b0;
      Next_tck();
      reset_done = 1;
   endtask

   /****************************/
   // read the dut ID code
   /****************************/
   extern task ReadID(jtag_regfile_trans_t new_trans);

   /****************************************************************************
    ************* Very low level tasks to manipulate the jtag state machine 
    ***************************************************************************/
    task Next_edge();
       // To make life simpler, tck is actually synchrionized as 1/4 Clk with a
       // phase shift of 1 Clk:
       // Clk: _|-|_|-|_|-|_|-|_|-|_|-|_|-|_|-|_|-
       // tck: _|-------|_______|-------|_______|-
       // tdi: aaaa><bbbbbb><cccccc><ddddddd><eeeeee

       @(posedge this.ifc.Clk);
       this.ifc.tck = tck_edge;
       tck_edge = 1-tck_edge;
       @(posedge this.ifc.Clk);
    endtask

    extern task Next_pos_edge();
    extern task Next_neg_edge();
    extern task Next_tck();
    extern task ShiftDR(
	input logic [127:0] data_in, 
	input int 	    length,
	logic 		    compare = 'b0);
    extern  task ShiftIR(
	input logic [31:0]  inst_in, 
	input int           length);
endclass: JTAGDriver

   /****************************************************************************
    *************************** Top level  tasks 
    ***************************************************************************/
   // task Send sends a single jtag to regfile transaction
   task JTAGDriver::Send(jtag_regfile_trans_t new_trans);
      cur_trans = new_trans;

      // first which regfile is it going to?
      if (cur_trans.domain == sc_domain) begin
	 // send address
	 ShiftIR(sc_cfg_addr, jtag_inst_width);
	 ShiftDR(cur_trans.addr, sc_addr_width);

	 // read or write changes the order of data vs op
	 // for reads, first send instructions then get data
	 if (cur_trans.op == read) begin
	    // send instruction
	    ShiftIR(sc_cfg_inst, jtag_inst_width);
	    ShiftDR(cur_trans.op, sc_op_width);

	    // get data
	    ShiftIR(sc_cfg_data, jtag_inst_width);
	    ShiftDR(cur_trans.data_in, sc_bus_width, 'b1);	    
	 end

	 // for writes, first send data then sned instructions
	 if (cur_trans.op == write) begin
	    // send data
	    ShiftIR(sc_cfg_data, jtag_inst_width);
	    ShiftDR(cur_trans.data_in, sc_bus_width);	    

	    // send instruction
	    ShiftIR(sc_cfg_inst, jtag_inst_width);
	    ShiftDR(cur_trans.op, sc_op_width);  
	 end	 
      end

      // first which regfile is it going to?
      if (cur_trans.domain == tc_domain) begin
	 // send address
	 ShiftIR(tc_cfg_addr, jtag_inst_width);
	 ShiftDR(cur_trans.addr, tc_addr_width);

	 // read or write changes the order of data vs op
	 // for reads, first send instructions then get data
	 if (cur_trans.op == read) begin
	    // send instruction
	    ShiftIR(tc_cfg_inst, jtag_inst_width);
	    ShiftDR(cur_trans.op, tc_op_width);

	    // get data
	    ShiftIR(tc_cfg_data, jtag_inst_width);
	    ShiftDR(cur_trans.data_in, tc_bus_width, 'b1);	    
	 end

	 // for writes, first send data then send instructions
	 if (cur_trans.op == write) begin
	    // send data
	    ShiftIR(tc_cfg_data, jtag_inst_width);
	    ShiftDR(cur_trans.data_in, tc_bus_width);	    

	    // send instruction
	    ShiftIR(tc_cfg_inst, jtag_inst_width);
	    ShiftDR(cur_trans.op, tc_op_width);  
	 end	 
      end

      if (this.svf_file)
	$fdisplay(this.svf_file, "RUNTEST IDLE 10 TCK IDLE;\n");
      Next_tck();
      Next_tck();
      cur_trans.done = 1;
   endtask // Send

   /****************************/
   // get the results of the latest transaction sent
   /****************************/
   function jtag_regfile_trans_t JTAGDriver::GetResult();
      return cur_trans;
   endfunction // jtag_regfile_trans_t


   /****************************/
   // initialization of the jtag signals
   /****************************/
   task JTAGDriver::Zero();
      this.ifc.tdi = 1'b0;
      this.ifc.tms = 1'b1;
      this.ifc.tck = 1'b0;
      this.ifc.trst_n = 1'b0;
   endtask // Zero

/****************************/
// read the dut ID code
/****************************/
task JTAGDriver::ReadID(jtag_regfile_trans_t new_trans);
   cur_trans = new_trans;
   ShiftIR(idcode, jtag_inst_width);
   ShiftDR('0, 32, 'b1);
   $display("%t: ID CODE: %8x", $time, cur_trans.data_out);
   if (this.svf_file)
     $fdisplay(this.svf_file, "RUNTEST IDLE 10 TCK IDLE;\n");
endtask // JTAGDriver::ReadID




   /****************************************************************************
    ************* Very low level tasks to manipulate the jtag state machine 
    ***************************************************************************/
   task JTAGDriver::Next_pos_edge();
      if (tck_edge == 1)
	Next_tck();
      else
	if (tck_edge != 1)
	  Next_edge();
   endtask // Next_pos_edge

   task JTAGDriver::Next_neg_edge();
      if (tck_edge == 0)
	Next_tck();
      else
	if (tck_edge != 0)
	  Next_edge();
   endtask // Next_neg_edge

   /****************************/
   task JTAGDriver::Next_tck();
      Next_edge();
      Next_edge();
   endtask // Next_tck


   /****************************/
   task JTAGDriver::ShiftDR(input logic [127:0] data_in, 
			 input int length, logic compare = 'b0);
      int i;
      int mask_len;
      string format;
      string mask;
      string mask_len_s;

      if (!reset_done)
	Reset();

      // Move to Run-Test/Idle state (if not already there)
      Next_neg_edge();
      this.ifc.tms = 1'b0;
      Next_neg_edge();
      Next_neg_edge();
      Next_neg_edge();


      /***** DR PATH *****/

      // Move to Select-DR-Scan state
      this.ifc.tms = 1'b1;
      Next_neg_edge();

      // Move to Capture DR state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // Move to Shift-DR state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // Remain in Shift-DR state and shift in data_in. Observe the TDO signal to read the data_out
      for (i = 0; i < length-1; i = i + 1) begin
	 this.ifc.tdi = data_in[i];
	 Next_pos_edge();
	 cur_trans.data_out[i] = this.ifc.tdo;
	 Next_neg_edge();
      end


      // Shift in the last bit and switch to Exit1-DR state
      this.ifc.tdi = data_in[(length-1)];
      this.ifc.tms = 1'b1;

      Next_pos_edge();
      cur_trans.data_out[(length-1)] = this.ifc.tdo;
      Next_neg_edge();

      // Move to Update-DR state
      this.ifc.tms = 1'b1;
      Next_neg_edge();

      // Move to Run-Test/Idle state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // wait a cycle... why hurry?
      Next_neg_edge();

      // Dump SVF
      if(svf_file) begin
	 mask_len = (length + 3)/4;   // round up
	 repeat (mask_len) mask = {mask, "f"};
	 $sformat(mask_len_s, "%0d", mask_len);
	 if (compare) begin 
	    format = {"SDR %d TDI (%", mask_len_s, "h) SMASK (", mask, ")",
		      " TDO (%", mask_len_s,"h) MASK (", mask,");"};
	    $fdisplay(svf_file, format, length, data_in, cur_trans.data_out);
	 end 
	 else begin	   
	    format = {"SDR %d TDI (%", mask_len_s, "h) SMASK (", mask, ");"};
	    $fdisplay(svf_file, format, length, data_in);
	 end
      end
   endtask // shiftDR






   /****************************
    * Shift the jtag instruction in
    * **************************/
   task JTAGDriver::ShiftIR(
    input 	      logic [31:0] inst_in, 
    input 	      int length
		);
      int i;
      int mask_len;
      string format;
      string mask;
      string mask_len_s;

      if (!reset_done)
	Reset();

      // Move to Run-Test/Idle state (if not already there)
      Next_neg_edge();
      this.ifc.tms = 1'b0;
      Next_neg_edge();
      Next_neg_edge();
      Next_neg_edge();


      /***** IR PATH *****/

      // Move to Select-DR-Scan state
      this.ifc.tms = 1'b1;
      Next_neg_edge();

      // Move to Select-IR-Scan state
      this.ifc.tms = 1'b1;
      Next_neg_edge();

      // Move to Capture IR state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // Move to Shift-IR state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // Remain in Shift-IR state and shift in inst_in. Observe the TDO signal to read the x_inst_out
      for (i = 0; i < length-1; i = i + 1) begin
	 this.ifc.tdi = inst_in[i];
	 Next_pos_edge();
	 // x = this.ifc.tdo; // can also read the previous instruction out here
	 Next_neg_edge();
      end

      // Shift in the last bit and switch to Exit1-IR state
      this.ifc.tdi = inst_in[(length-1)];
      this.ifc.tms = 1'b1;

      Next_pos_edge();
      // x = this.ifc.tdo; // read the last bit out
      Next_neg_edge();

      // Move to Update-IR state
      this.ifc.tms = 1'b1;
      Next_neg_edge();

      // Move to Run-Test/Idle state
      this.ifc.tms = 1'b0;
      Next_neg_edge();

      // wait a cycle... why hurry?
      Next_neg_edge();


      // Dump SVF
      if(svf_file) begin
	 mask_len = (length + 3)/4;   // round up
	 repeat (mask_len) mask = {mask, "f"};
	 $sformat(mask_len_s, "%0d", mask_len);
	 format = {"SIR %d TDI (%", mask_len_s, "h) SMASK (", mask, ");"};
	 $fdisplay(svf_file, format, length, inst_in);
      end
   endtask

endpackage